name: Release CI

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name for the release (e.g., v1.0.0). If empty, a tag will be generated from the run number.'
        required: false
        default: ''
      name:
        description: 'Release title (optional). If empty, a title will be generated using the tag.'
        required: false
        default: ''

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PROJECT: 'MagickCrop'
  PROJECT_PATH: 'MagickCrop/MagickCrop.csproj'
  BUILD_X64: 'bld/x64'
  BUILD_X64_SC: 'bld/x64/MagickCrop-Self-Contained'
  BUILD_ARM64: 'bld/arm64'
  BUILD_ARM64_SC: 'bld/arm64/MagickCrop-arm64-Self-Contained'

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '9.0.x'

      - name: Install dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Compute build version, archive paths, and release metadata
        id: compute
        shell: pwsh
        run: |
          $version = Get-Date -Format 'yyyy-MM-dd'
          $archiveX64 = "${{ env.BUILD_X64 }}/${{ env.PROJECT }}-x64-Self-Contained-$version.zip"
          $archiveArm64 = "${{ env.BUILD_ARM64 }}/${{ env.PROJECT }}-arm64-Self-Contained-$version.zip"

          $baseTag = "${{ github.event.inputs.tag }}"
          if ([string]::IsNullOrWhiteSpace($baseTag)) { $baseTag = "v${{ github.run_number }}" }
          $tagX64 = "$baseTag-x64"
          $tagArm64 = "$baseTag-arm64"

          $baseName = "${{ github.event.inputs.name }}"
          if ([string]::IsNullOrWhiteSpace($baseName)) { $baseName = "MagickCrop $baseTag" }
          $nameX64 = "$baseName (x64)"
          $nameArm64 = "$baseName (arm64)"

          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "archive_x64_sc=$archiveX64" >> $env:GITHUB_OUTPUT
          echo "archive_arm64_sc=$archiveArm64" >> $env:GITHUB_OUTPUT
          echo "release_tag_x64=$tagX64" >> $env:GITHUB_OUTPUT
          echo "release_tag_arm64=$tagArm64" >> $env:GITHUB_OUTPUT
          echo "release_name_x64=$nameX64" >> $env:GITHUB_OUTPUT
          echo "release_name_arm64=$nameArm64" >> $env:GITHUB_OUTPUT

      - name: Clean build directories
        shell: pwsh
        run: |
          if (Test-Path '${{ env.BUILD_X64 }}') { Remove-Item '${{ env.BUILD_X64 }}' -Recurse -Force }
          if (Test-Path '${{ env.BUILD_ARM64 }}') { Remove-Item '${{ env.BUILD_ARM64 }}' -Recurse -Force }
          New-Item -ItemType Directory -Path '${{ env.BUILD_X64 }}' -Force | Out-Null
          New-Item -ItemType Directory -Path '${{ env.BUILD_ARM64 }}' -Force | Out-Null

      - name: Build x64 framework-dependent
        run: >-
          dotnet publish ${{ env.PROJECT_PATH }}
          --runtime win-x64
          --self-contained false
          -c Release
          -v minimal
          -o ${{ env.BUILD_X64 }}
          -p:EnableMsixTooling=true
          -p:PublishReadyToRun=false
          -p:PublishSingleFile=true
          -p:CopyOutputSymbolsToPublishDirectory=false
          --nologo

      - name: Build x64 self-contained
        run: >-
          dotnet publish ${{ env.PROJECT_PATH }}
          --runtime win-x64
          --self-contained true
          -c Release
          -v minimal
          -o ${{ env.BUILD_X64_SC }}
          -p:EnableMsixTooling=true
          -p:PublishReadyToRun=true
          -p:PublishSingleFile=true
          -p:CopyOutputSymbolsToPublishDirectory=false
          --nologo

      - name: Build ARM64 framework-dependent
        run: >-
          dotnet publish ${{ env.PROJECT_PATH }}
          --runtime win-arm64
          --self-contained false
          -c Release
          -v minimal
          -o ${{ env.BUILD_ARM64 }}
          -p:PublishSingleFile=true
          -p:EnableMsixTooling=true
          -p:CopyOutputSymbolsToPublishDirectory=false
          --nologo

      - name: Build ARM64 self-contained
        run: >-
          dotnet publish ${{ env.PROJECT_PATH }}
          --runtime win-arm64
          --self-contained true
          -c Release
          -v minimal
          -o ${{ env.BUILD_ARM64_SC }}
          -p:PublishSingleFile=true
          -p:EnableMsixTooling=true
          -p:CopyOutputSymbolsToPublishDirectory=false
          --nologo

      - name: Rename ARM64 executables
        shell: pwsh
        run: |
          if (Test-Path "${{ env.BUILD_ARM64 }}/${{ env.PROJECT }}.exe") {
            Rename-Item "${{ env.BUILD_ARM64 }}/${{ env.PROJECT }}.exe" 'MagickCrop-arm64.exe'
          }
          if (Test-Path "${{ env.BUILD_ARM64_SC }}/${{ env.PROJECT }}.exe") {
            Rename-Item "${{ env.BUILD_ARM64_SC }}/${{ env.PROJECT }}.exe" 'MagickCrop-arm64.exe'
          }

      - name: Create self-contained archives
        shell: pwsh
        run: |
          $x64Zip = "${{ steps.compute.outputs.archive_x64_sc }}"
          $arm64Zip = "${{ steps.compute.outputs.archive_arm64_sc }}"
          if (Test-Path $x64Zip) { Remove-Item -Force $x64Zip }
          if (Test-Path $arm64Zip) { Remove-Item -Force $arm64Zip }
          Compress-Archive -Path "${{ env.BUILD_X64_SC }}" -DestinationPath $x64Zip -Force
          Compress-Archive -Path "${{ env.BUILD_ARM64_SC }}" -DestinationPath $arm64Zip -Force

      - name: Version information
        shell: pwsh
        run: |
          $exe = Join-Path '${{ env.BUILD_X64 }}' '${{ env.PROJECT }}.exe'
          if (Test-Path $exe) {
            $vi = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($exe)
            Write-Host "Product Version: $($vi.ProductVersion)"
            Write-Host "File Version: $($vi.FileVersion)"
          }

      - name: Upload build artifact (x64 ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: MagickCrop-win-x64
          path: ${{ steps.compute.outputs.archive_x64_sc }}

      - name: Upload build artifact (arm64 ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: MagickCrop-win-arm64
          path: ${{ steps.compute.outputs.archive_arm64_sc }}

      - name: Create draft GitHub release (x64) and upload asset
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.compute.outputs.release_tag_x64 }}
          name: ${{ steps.compute.outputs.release_name_x64 }}
          target_commitish: ${{ github.sha }}
          draft: true
          prerelease: true
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            ${{ steps.compute.outputs.archive_x64_sc }}

      - name: Create draft GitHub release (arm64) and upload asset
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.compute.outputs.release_tag_arm64 }}
          name: ${{ steps.compute.outputs.release_name_arm64 }}
          target_commitish: ${{ github.sha }}
          draft: true
          prerelease: true
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            ${{ steps.compute.outputs.archive_arm64_sc }}
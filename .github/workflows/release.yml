name: Release CI

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name for the release (e.g., v1.0.0). If empty, a tag will be generated from the run number.'
        required: false
        default: ''
      name:
        description: 'Release title (optional). If empty, a title will be generated using the tag.'
        required: false
        default: ''

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PROJECT: 'MagickCrop'
  PROJECT_PATH: 'MagickCrop/MagickCrop.csproj'
  BUILD_X64: 'bld/x64'
  BUILD_X64_SC: 'bld/x64/MagickCrop-Self-Contained'
  BUILD_ARM64: 'bld/arm64'
  BUILD_ARM64_SC: 'bld/arm64/MagickCrop-arm64-Self-Contained'

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '9.0.x'

      - name: Install dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Compute build version and archive paths
        shell: pwsh
        run: |
          $version = Get-Date -Format 'yyyy-MM-dd'
          echo "VERSION=$version" >> $env:GITHUB_ENV
          echo "ARCHIVE_X64_SC=${{ env.BUILD_X64 }}/${{ env.PROJECT }}-x64-Self-Contained-$version.zip" >> $env:GITHUB_ENV
          echo "ARCHIVE_ARM64_SC=${{ env.BUILD_ARM64 }}/${{ env.PROJECT }}-arm64-Self-Contained-$version.zip" >> $env:GITHUB_ENV

      - name: Clean build directories
        shell: pwsh
        run: |
          if (Test-Path '${{ env.BUILD_X64 }}') { Remove-Item '${{ env.BUILD_X64 }}' -Recurse -Force }
          if (Test-Path '${{ env.BUILD_ARM64 }}') { Remove-Item '${{ env.BUILD_ARM64 }}' -Recurse -Force }
          New-Item -ItemType Directory -Path '${{ env.BUILD_X64 }}' -Force | Out-Null
          New-Item -ItemType Directory -Path '${{ env.BUILD_ARM64 }}' -Force | Out-Null

      - name: Build x64 framework-dependent
        run: >-
          dotnet publish ${{ env.PROJECT_PATH }}
          --runtime win-x64
          --self-contained false
          -c Release
          -v minimal
          -o ${{ env.BUILD_X64 }}
          -p:EnableMsixTooling=true
          -p:PublishReadyToRun=false
          -p:PublishSingleFile=true
          -p:CopyOutputSymbolsToPublishDirectory=false
          --nologo

      - name: Build x64 self-contained
        run: >-
          dotnet publish ${{ env.PROJECT_PATH }}
          --runtime win-x64
          --self-contained true
          -c Release
          -v minimal
          -o ${{ env.BUILD_X64_SC }}
          -p:EnableMsixTooling=true
          -p:PublishReadyToRun=true
          -p:PublishSingleFile=true
          -p:CopyOutputSymbolsToPublishDirectory=false
          --nologo

      - name: Build ARM64 framework-dependent
        run: >-
          dotnet publish ${{ env.PROJECT_PATH }}
          --runtime win-arm64
          --self-contained false
          -c Release
          -v minimal
          -o ${{ env.BUILD_ARM64 }}
          -p:PublishSingleFile=true
          -p:EnableMsixTooling=true
          -p:CopyOutputSymbolsToPublishDirectory=false
          --nologo

      - name: Build ARM64 self-contained
        run: >-
          dotnet publish ${{ env.PROJECT_PATH }}
          --runtime win-arm64
          --self-contained true
          -c Release
          -v minimal
          -o ${{ env.BUILD_ARM64_SC }}
          -p:PublishSingleFile=true
          -p:EnableMsixTooling=true
          -p:CopyOutputSymbolsToPublishDirectory=false
          --nologo

      - name: Rename ARM64 executables
        shell: pwsh
        run: |
          if (Test-Path "${{ env.BUILD_ARM64 }}/${{ env.PROJECT }}.exe") {
            Rename-Item "${{ env.BUILD_ARM64 }}/${{ env.PROJECT }}.exe" 'MagickCrop-arm64.exe'
          }
          if (Test-Path "${{ env.BUILD_ARM64_SC }}/${{ env.PROJECT }}.exe") {
            Rename-Item "${{ env.BUILD_ARM64_SC }}/${{ env.PROJECT }}.exe" 'MagickCrop-arm64.exe'
          }

      - name: Create self-contained archives
        shell: pwsh
        run: |
          if (Test-Path "${{ env.ARCHIVE_X64_SC }}") { Remove-Item -Force "${{ env.ARCHIVE_X64_SC }}" }
          if (Test-Path "${{ env.ARCHIVE_ARM64_SC }}") { Remove-Item -Force "${{ env.ARCHIVE_ARM64_SC }}" }
          Compress-Archive -Path "${{ env.BUILD_X64_SC }}" -DestinationPath "${{ env.ARCHIVE_X64_SC }}" -Force
          Compress-Archive -Path "${{ env.BUILD_ARM64_SC }}" -DestinationPath "${{ env.ARCHIVE_ARM64_SC }}" -Force

      - name: Version information
        shell: pwsh
        run: |
          $exe = Join-Path '${{ env.BUILD_X64 }}' '${{ env.PROJECT }}.exe'
          if (Test-Path $exe) {
            $vi = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($exe)
            Write-Host "Product Version: $($vi.ProductVersion)"
            Write-Host "File Version: $($vi.FileVersion)"
          }

      - name: Upload build artifacts (ZIPs)
        uses: actions/upload-artifact@v4
        with:
          name: MagickCrop-zips
          path: |
            ${{ env.ARCHIVE_X64_SC }}
            ${{ env.ARCHIVE_ARM64_SC }}

      - name: Compute release tag and name
        shell: pwsh
        run: |
          $tag = "${{ github.event.inputs.tag }}"
          if ([string]::IsNullOrWhiteSpace($tag)) { $tag = "v${{ github.run_number }}" }
          echo "RELEASE_TAG=$tag" >> $env:GITHUB_ENV

          $name = "${{ github.event.inputs.name }}"
          if ([string]::IsNullOrWhiteSpace($name)) { $name = "MagickCrop $tag" }
          echo "RELEASE_NAME=$name" >> $env:GITHUB_ENV

      - name: Create draft GitHub release and upload assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          target_commitish: ${{ github.sha }}
          draft: true
          prerelease: true
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            ${{ env.ARCHIVE_X64_SC }}
            ${{ env.ARCHIVE_ARM64_SC }}